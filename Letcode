
1. Counting Words With a Given Prefix

class Solution(object):
    def prefixCount(self, words, pref):
        return sum(word.startswith(pref) for word in words)

# Example usage for testing
if __name__ == "__main__":
    solution = Solution()
    words1 = ["pay", "attention", "practice", "attend"]
    pref1 = "at"
    print(solution.prefixCount(words1, pref1))  # Output: 2

    words2 = ["leetcode", "win", "loops", "success"]
    pref2 = "code"
    print(solution.prefixCount(words2, pref2))  # Output: 0


2.   Median of a Row Wise Sorted Matrix

class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        # Ensure nums1 is the smaller array
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1

        m, n = len(nums1), len(nums2)
        imin, imax, half_len = 0, m, (m + n + 1) // 2

        while imin <= imax:
            i = (imin + imax) // 2
            j = half_len - i

            if i < m and nums1[i] < nums2[j - 1]:
                # i is too small
                imin = i + 1
            elif i > 0 and nums1[i - 1] > nums2[j]:
                # i is too big
                imax = i - 1
            else:
                # i is perfect
                max_of_left = 0
                if i == 0:
                    max_of_left = nums2[j - 1]
                elif j == 0:
                    max_of_left = nums1[i - 1]
                else:
                    max_of_left = max(nums1[i - 1], nums2[j - 1])

                if (m + n) % 2 == 1:
                    return max_of_left

                min_of_right = 0
                if i == m:
                    min_of_right = nums2[j]
                elif j == n:
                    min_of_right = nums1[i]
                else:
                    min_of_right = min(nums1[i], nums2[j])

                return (max_of_left + min_of_right) / 2.0








3. Regular Expression Matching


class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        # Create a DP table
        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
        dp[0][0] = True  # Both s and p are empty

        # Handle patterns with '*' at the beginning
        for j in range(1, len(p) + 1):
            if p[j - 1] == '*':
                dp[0][j] = dp[0][j - 2]

        # Fill the DP table
        for i in range(1, len(s) + 1):
            for j in range(1, len(p) + 1):
                if p[j - 1] == s[i - 1] or p[j - 1] == '.':
                    # Characters match or pattern has '.'
                    dp[i][j] = dp[i - 1][j - 1]
                elif p[j - 1] == '*':
                    # '*' matches zero or more of the preceding character
                    dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))

        return dp[len(s)][len(p)]

# Example usage
if __name__ == "__main__":
    solution = Solution()

    # Example 1
    s1 = "aa"
    p1 = "a"
    print(solution.isMatch(s1, p1))  # Output: False

    # Example 2
    s2 = "aa"
    p2 = "a*"
    print(solution.isMatch(s2, p2))  # Output: True

    # Example 3
    s3 = "ab"
    p3 = ".*"
    print(solution.isMatch(s3, p3))  # Output: True

    # Additional Examples
    s4 = "aab"
    p4 = "c*a*b"
    print(solution.isMatch(s4, p4))  # Output: True

    s5 = "mississippi"
    p5 = "mis*is*p*."
    print(solution.isMatch(s5, p5))  # Output: False


4. Combination Sum

class Solution:
    def combinationSum(self, candidates, target):
        result = []
        
        def backtrack(start, target, path):
            # If the target becomes 0, we found a valid combination
            if target == 0:
                result.append(path)
                return
            # Try each candidate from the start index
            for i in range(start, len(candidates)):
                # If the current candidate is greater than the target, skip
                if candidates[i] > target:
                    continue
                # Recurse by choosing the current candidate (can reuse the same element)
                backtrack(i, target - candidates[i], path + [candidates[i]])

        # Start backtracking from index 0
        backtrack(0, target, [])
        return result

# Example usage
if __name__ == "__main__":
    solution = Solution()

    # Example 1
    candidates1 = [2, 3, 6, 7]
    target1 = 7
    print(solution.combinationSum(candidates1, target1))  # Output: [[2, 2, 3], [7]]

    # Example 2
    candidates2 = [2, 3, 5]
    target2 = 8
    print(solution.combinationSum(candidates2, target2))  # Output: [[2, 2, 2, 2], [2, 3, 3], [3, 5]]

    # Example 3
    candidates3 = [2]
    target3 = 1
    print(solution.combinationSum(candidates3, target3))  # Output: []


